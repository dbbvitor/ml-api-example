name: Python releases

on:
  release:
    types: [ published, edited ]

jobs:
  docker:
    if: github.repository == 'dbbvitor/ml-api'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build and push version
      uses: docker/build-push-action@v3
      with:
        context: .
        file: ./Dockerfile
        push: true

        tags:
          ${{ secrets.DOCKER_HUB_USERNAME }}/${{ github.event.repository.name }}:${{ github.event.release.tag_name }},
          ${{ secrets.DOCKER_HUB_USERNAME }}/${{ github.event.repository.name }}:latest

    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}


  gh-container-registry:
    if: github.repository == 'dbbvitor/ml-api'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}


  document:
    if: github.repository == 'dbbvitor/ml-api'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup git user
        run: |
          date > generated.txt
          git config --global user.name github-actions
          git config --global user.email github-actions@github.com

      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          cache: "poetry"
      - run: poetry install --no-interaction --with docs

      - name: Build site
        run: poetry run mkdocs build

      - name: Install semver tag dependency
        run: npm install semver

      - name: Get latest release tag
        id: latest-release
        uses: actions/github-script@v6
        with:
          script: |
            const semver = require('semver');
            const releases = await github.rest.repos.listReleases({owner: context.repo.owner, repo: context.repo.repo});
            let tags;
            if (Array.isArray(releases.data)) {
              tags = releases.data.map(release => release.tag_name);
            } else {
              tags = [releases.data.tag_name];
            }
            const latestTag = semver.maxSatisfying(tags, '*');
            const majorMinor = "v" + semver.major(latestTag) + "." + semver.minor(latestTag);
            console.log("Latest semver tag: " + majorMinor);
            return majorMinor
          result-encoding: string

      - name: Get current tag
        run: |
          CURRENT_TAG=$(git tag | sort --version-sort | tail -n1 | grep -Po '^([^.]*\.[^.]*)')
          echo "CURRENT_TAG=$CURRENT_TAG" >> $GITHUB_ENV

      - name: Deploy docs latest
        if: ${{ env.CURRENT_TAG == steps.latest-release.outputs.result }}
        run: |
          echo "Latest release is: ${{ steps.latest-release.outputs.result }}"
          poetry run mike deploy --push --update-aliases ${{ env.CURRENT_TAG }} latest

      - name: Deploy docs no alias
        if: ${{ env.CURRENT_TAG != steps.latest-release.outputs.result }}
        run: |
          echo "Latest release is: ${{ steps.latest-release.outputs.result }}. Current push is: ${{ env.CURRENT_TAG }}"
          poetry run mike deploy --push ${{ env.CURRENT_TAG }}
